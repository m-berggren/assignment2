Oleksandr did Exercise 8, which was built upon Exercise 4. He created a new class named "Type",
with an encapsulated immutable attribute, and constructor for it, as well as a new file with
enums named "PokemonType" where various Pokemon types (WATER, FIRE, GRASS, and NORMAL) are stored.
Secondly, he created a "calculateDamage" method containing nested switch cases. The outer switch
case is responsible for different Pokemon types, while the inner one adjusts the damage multiplier
based on the interaction with the defending Pokemon type. There are three types of damage multipliers:
half (returning 0.5), normal (returning 1), and double damage (returning 2) respectively.

When the new task was assigned, I didn't have to make any changes to my classes for skills and items.
However, when Marcus and I refactored the code, we swapped the names of the enums and switch cases,
following the order specified by the customer. I believe these changes to the code enhance readability,
which is a crucial aspect of design. Additionally, we ensured that each type multiplier is correct to
confirm that our code aligns with the customer's specifications.

Meanwhile, Oleksandr has added new enums (BUG, DRAGON, ELECTRIC, ICE) to the "PokemonType" file. Furthermore,
in the "Type" class, he created four new switch cases for the new types, along with the corresponding damage
multipliers as specified by the customer. From the beginning, my teammate chose the correct strategy, and his
code design was adaptable. Because of that, he added new types from the specification without encountering any issues.